\chapter{\R\ basics for parallel code}
%-------------------------------------



This section describes the basics needed prior to running code on multiple
cores using data stored as a list and the \texttt{lapply} approach. It covers
list creation and manipulation and \texttt{lapply} call.

If you are already familiar with lists and \texttt{lapply}, you can skip it and
go directly to section \ref{section.parallel.local.computer}.



\section{Basic list manipulation}
%--------------------------------



Lists can be seen as sophisticated \R\ vectors. A vector in \R\ can store a 
sequence of objects of the same type (e.g. all numbers or all strings), 
but cannot store objects of different types. A list can store objects of 
different types. Below is a short introduction about vectors and lists in \R.

A vector can be created using
the \texttt{c()} function to combine values.

<<>>=
x = c(1, 4, 2, 5)
x
class(x)
@

A vector can store numbers or strings.

<<>>=
x = c(1, 4, 2, 5)
x
class(x)
y = c("sweave", "R", "latex", "knitr")
y
class(y)
@

An element from a vector can be accessed with the \texttt{[]} notation.

<<>>=
y
y[1]
y[2:4]
y[c(2, 4)]
@

However, a vector cannot mix different types of objects:

<<>>=
z = c(1, 4, "sweave", "R")
z
class(z)
@

If we try to mix numbers and strings in a single vector, \R\ automatically
convert the numbers to strings.

A list can store a sequence of objects as vectors do, but those objects can be 
of different types. A list can be created using the \texttt{list()} function.

<<>>=
lst = list(1, 4, "sweave", "R")
class(lst)
@

An element from a list can be accessed using the \texttt{[[]]} notation.

<<>>=
length(lst)
lst[[1]]
lst[[3]]
@

A list does not modify the type of its elements.

<<>>=
class(lst[[1]])
class(lst[[3]])
@

An interesting feature of lists is that each element can be named and 
retrieved by its name. To retrieve an element by its name, we can use the
\texttt{[[]]} or \texttt{\$} notation.

<<>>=
lst = list("player" = c("Socrates", "Karl Marx"), 
           "goals" = c(2, 3))
str(lst) # str() displays the structure of an object
lst[["player"]]
lst$goals
@

Elements from a named list can still be retrieved by their index.

<<>>=
names(lst)
lst[[1]]
lst[[2]]
@

Elements can be added after the creation of the list.

<<>>=
lst[["team"]] = c("Greece", "Germany")
names(lst)
lst$team
lst[[3]]
@

A new named element is automatically appended after the last element.
An element can also be added using an index number.

<<>>=
lst[[4]] = c("wine", "beer")
lst[[7]] = c("Athens", "Berlin")
str(lst)
@

If an element is added with an index number greater than the last element
index plus one, \texttt{NULL} objects are automatically inserted in between.

The names of the elements of a list and the elements themselves can also 
be modified afterwards.

<<>>=
names(lst)
names(lst)[4] = "beverage"
names(lst)[7] = "capital.city"
str(lst)
lst[[7]][2] = "Trier"
names(lst)[c(4, 7)] = c("preferred.beverage", "birth.place")
str(lst)
@

Lists are sequences of objects, and as such it is possible to iterate over
each object contained in a list.

<<>>=
for (object in lst) {
  print(object[1]) # print the first element of each object
}
@



\section{Using \texttt{sapply} and \texttt{lapply} on a vector and on a list}
%----------------------------------------------------------------------------



In the introduction, we used \texttt{sapply} to calculate the square for numbers
contained in a vector. The return value is also a vector:

<<>>=
# define the vector
v = 1:10
v
# function to return the square
f = function(x) { x^2 }
# apply f to each element of v with sapply
r = sapply(v, f)
r
# each element of r corresponds to an element of v
# for example
v[2]
r[2] # r[2] is f(v[2])
v[5]
r[5] # r[5] is f(v[5])
@

To apply a function to each element of a list, we use \texttt{lapply}. The 
return value is a list:

<<>>=
# define a list
lst = list()
lst[["length_male_dragon"]] = c(7, 8, 6, 8, 7, 6)
lst[["length_female_dragon"]] = c(5, 6, 7, 5, 6, 8)
str(lst)
# define a function to calculate the mean length
f = function(x) { sum(x) / length(x) }
# apply f to each element of lst
r = lapply(lst, f)
class(r) # r is a list also
str(r) # each element of r matches an element of lst
lst[[1]]
r[[1]] # r[[1]] is f(lst[[1]])
lst[[2]]
r[[2]] # r[[2]] is f(lst[[2]])
@

In the next section (\ref{section.parallel.local.computer}), we will see more
meaningful examples of how to store data into a list from an existing dataset
and of using \texttt{lapply}.



\section{Basic data frame manipulation}
%--------------------------------------



Running parallel code often requires to store an existing dataset (saved
in a text file from Excel and loaded into \R\ using \texttt{read.table} for 
example, or stored into separate files on the disk) into a list, dividing the 
original dataset into separated list elements.

When a data set is loaded from a text file, it is usually stored as a
\emph{data frame}. \texttt{iris} is a dataset shipped with R that we will use
in this short example. It is a data frame, which is equivalent to a table
containing data arranged in columns. Each row represents a record and each
column represents a variable.

<<>>=
class(iris) # data frame
dim(iris) # number of rows (records) and of columns (variables)
@

The names of the columns can be retrieved easily:

<<>>=
names(iris)
@

We can have a look at the data structure:

<<>>=
head(iris) # show the first rows to have an idea of the table content
str(iris) # show the type of each column
@

The data frame \texttt{iris} contains 150 records for which 5 variables are
available. The variables are \texttt{Sepal.Length}, \texttt{Sepal.Width}, 
\texttt{Petal.Length}, \texttt{Petal.Width} and \texttt{Species}.


Data frames and lists are actually very similar in the way the data can be 
accessed. Data frame columns are equivalent to list elements, and can be
accessed using the same notations: \texttt{[[]]} and \texttt{\$}.

<<>>=
# we use head to show only the beginning of each object
head(iris[[1]]) # Sepal.Length column
head(iris[["Sepal.Width"]])
head(iris$Petal.Length)
@

Another very convenient way to access the data in a dta frame is to use the
\texttt{[row, column]} notation:

<<>>=
# element from the first row, first column
iris[1, 1]
# element from the first row, 4th column
iris[1, 4]
# element from the second row, third column
iris[2, 3]
@

Integer ranges are allowed in the \texttt{[,]} notation:

<<>>=
# elements from rows 1 to 3, first column
iris[1:3, 1]
# elements from rows 2 to 4, columns 2 and 3
iris[2:4, 2:3]
@

Any vector of integers is actually allowed:

<<>>=
# elements from rows 1, 4, 5, and third column
iris[c(1, 4, 5), 3]
# elements from rows 4, 1 and columns 1 and 2
iris[c(4, 1), c(1, 2)]
@

Whole rows or whole columns can be selected if one side of the comma is left
blank:

<<>>=
# select ALL the rows in the 4th column
a = iris[, 4]
length(a)
head(a)
# select ALL the rows in the 3th and 5th columns
b = iris[, c(3,5)]
dim(b)
head(b)
# select ALL the columns for records 1 to 5
c = iris[1:5, ]
c
@

Finally, one of the most useful notation is to use conditions to select a set
of rows or columns. First we can store in a vector (\texttt{short.sepal}) whether
or not the sepal length of each record is less than 5:

<<>>=
short.sepal = (iris$Sepal.Length < 5)
length(short.sepal)
head(iris$Sepal.Length)
head(short.sepal)
@

The resulting vector contains \texttt{TRUE} and \texttt{FALSE} values indicating
whether or not the condition \texttt{(iris\$Sepal.Length < 5)} was true. This
vector can be used to specify which rows of the \texttt{iris} data frame we
want to select. We do this by using the TRUE/FALSE vector to specify the rows
in the \texttt{[,]} notation, and by leaving the column indication blank to 
retrieve all the columns for those rows:

<<>>=
short.sepal.iris = iris[short.sepal, ]
dim(short.sepal.iris)
head(short.sepal.iris)
@

\Sexpr{nrow(short.sepal.iris)} records with short sepals were retrieved.



\section{Using \texttt{apply} on a data frame}
%---------------------------------------------



\texttt{apply} is the \emph{apply} family function that can be used to apply one
function on every row or every column of a data frame. A call to \texttt{apply}
must provide the input data frame, specify if it has to work on rows or columns,
and provide the function to apply to each row or column.

For example, we can calculate the mean and standard deviation for each column
of the \texttt{iris} dataset:

<<>>=
# we use only the first four columns
head(iris[, 1:4])
# in this apply call, 2 specifies to work on columns, and mean
# is the function we apply to each column
apply(iris[, 1:4], 2, mean)
# sd calculates standard deviation
apply(iris[, 1:4], 2, sd)
@

Let's build a data frame for which we will calculate the row means:

<<>>=
# prepare an empty matrix
a = matrix(nrow = 3, ncol = 5)
# fill the rows with random numbers
a[1, ] = rnorm(5, 7) # 5 samples from a normal distribution with mean 7
a[2, ] = rnorm(5, 5) # 5 samples from a normal distribution with mean 5
a[3, ] = rnorm(5, 2) # 5 samples from a normal distribution with mean 2
a
# convert the matrix to a data frame
a = as.data.frame(a)
a
# apply the mean function to each row
apply(a, 1, mean) # 1 specifies to work on rows
@



\section{Example: arranging data into a list and using \texttt{lapply}}
%----------------------------------------------------------------------



In this example, we assume that our data is stored in a unique data frame, 
\texttt{iris}. This data frame contains data for several different species of
iris, and we would like to perform an analysis for each species. To do so,
we will split the data from the data frame into species specific data blocks, 
stored in a list, and then apply an analysis function to each element of the
list with \texttt{lapply}.



\subsection{Splitting the data frame into a list}
%------------------------------------------------



There are three different species in the \texttt{iris} dataset: 

<<>>=
unique(iris$Species)
@

We will separate the data for each species into three elements stored 
in one list. First, let's create an empty list:

<<>>=
sp.data = list()
@

For each species, we now store the corresponding subset from the 
\texttt{iris} dataset into the list with a \texttt{for} loop:

<<>>=
species = unique(iris$Species) # we retrieve the  species names
species
# now we go through a for loop
for (sp in species) {
  # sp takes the values in species successively
  # during the first iteration, sp is setosa
  # during the second iteration, sp is versicolor
  # during the third iteration, sp is virginica
  #
  species.rows = (iris$Species == sp) # condition on Species
  # species.rows now contains TRUE/FALSE indicating the match 
  # between the value of sp and the iris$Species column
  #
  sp.data[[sp]] = iris[species.rows, ]
  # now we store the corresponding rows from the iris data frame, 
  # taking all the columns, into sp.data, in an element with the 
  # species name contained in sp
}
@

The list should now have three elements, each element being a data 
frame corresponding to a given species.

<<>>=
names(sp.data)
@

Let's check \textit{setosa}:

<<>>=
head(sp.data[["setosa"]])
@

And it is the same for \textit{versicolor} and \textit{virginica}:

<<>>=
head(sp.data[["versicolor"]])
head(sp.data[["virginica"]])
@



\subsection{Applying a function to each element of a list with \texttt{lapply}}
%------------------------------------------------------------------------------



We want to calculate the average petal length for each iris species. For
this, we first define a function that will calculate the average value
for the column \texttt{Petal.Length} in any data frame. This time we use
the built-in \texttt{mean} function instead of \texttt{sum} and 
\texttt{length}.

<<>>=
calculate.mean.petal.length = function(x) {
  mean(x$Petal.Length)  
}
@

We can use \texttt{lapply} to apply the function on each element of the list 
that we built previously.

<<>>=
# apply the function to each element of the list
mean.lengths = lapply(sp.data, calculate.mean.petal.length)
# display the results
mean.lengths
@ 
